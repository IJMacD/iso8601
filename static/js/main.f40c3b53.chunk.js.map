{"version":3,"sources":["ISO8601.js","Pages/ISO8601TestPage.js","App.js","index.js"],"names":["getIntervalInstances","DateTimeSpec","input","relativeTo","Object","assign","this","parseEndDate","test","split","dateInput","timeInput","dt","parseTime","parseDate","day","yearDay","console","log","Error","end","setDate","start","getDate","setHours","hour","minute","setMinutes","second","setSeconds","setMilliseconds","getMilliseconds","DateTimeIntervalSpec","first","last","period","repetitions","m","exec","Infinity","substr","length","partA","partB","e","parsePeriod","addDateTimeAndPeriod","subtractPeriodFromDateTime","parse","Date","setFullYear","millennium","century","decade","year","month","week","s","getDay","weekYear","getFullYear","getMonth","weekDay","startDate","maybeDatePart","timePart","candidate","getMonthLength","setMonth","t","datePart","out","years","months","weeks","days","hours","minutes","seconds","dateTime","addDateAndPeriod","date","d","rem","setTime","getHours","getMinutes","getSeconds","y","value","prevValue","i","delta","ISO8601TestPage","convertedInput","error","useState","inputValue","setInputValue","ISO8601","message","style","padding","display","flexDirection","onChange","target","margin","fontSize","placeholder","color","DateTimePreview","label","map","v","showCode","setShowCode","dateFormatter","format","toISOString","Intl","DateTimeFormat","dateStyle","timeStyle","pStyle","labelStyle","fontFamily","hintStyle","type","maxRepetitions","generatorToArray","slice","getRepetitions","isValidDate","border","cursor","onClick","getOrdinal","JSON","stringify","n","generator","maxLength","list","result","next","done","push","isNaN","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f40c3b53.chunk.js","sourcesContent":["export class DateTimeSpec {\r\n    /** @type {?number} */\r\n    millennium;\r\n    /** @type {?number} */\r\n    century;\r\n    /** @type {?number} */\r\n    decade;\r\n    /** @type {?number} */\r\n    year;\r\n    /** @type {?number} */\r\n    month;\r\n    /** @type {?number} */\r\n    day;\r\n    /** @type {?number} */\r\n    hour;\r\n    /** @type {?number} */\r\n    minute;\r\n    /** @type {?number} */\r\n    second;\r\n    /** @type {?number} */\r\n    weekYear;\r\n    /** @type {?number} */\r\n    week;\r\n    /** @type {?number} */\r\n    yearDay;\r\n    /** @type {Date} */\r\n    start;\r\n    /** @type {Date} */\r\n    end;\r\n\r\n    /**\r\n     *\r\n     * @param {string} input\r\n     * @param {DateTimeSpec} relativeTo\r\n     */\r\n    constructor (input, relativeTo = null) {\r\n        if (relativeTo) {\r\n            return Object.assign(this, parseEndDate(input, relativeTo));\r\n        }\r\n\r\n        // if (/^T/.test(input)) {\r\n        //     return Object.assign(this, { ...parseTime(input.substr(1)), start: null, end: null });\r\n        // }\r\n\r\n        if (/T/.test(input)) {\r\n            const [dateInput, timeInput] = input.split(\"T\", 2);\r\n\r\n            const dt = {\r\n                ...parseTime(timeInput),\r\n                ...parseDate(dateInput),\r\n            };\r\n\r\n            if (typeof dt.day !== \"number\" && typeof dt.yearDay !== \"number\") {\r\n                console.log(dt);\r\n                // We didn't have a single day specified so a time is invalid\r\n                throw new Error(\"Invalid data time format \" + input);\r\n            }\r\n\r\n            // Since we have a time we'll reset the parsed date back to the same for start/end\r\n            dt.end.setDate(dt.start.getDate());\r\n\r\n            // Since we had a time component we *must* at least have an hour component\r\n            dt.start.setHours(dt.hour);\r\n\r\n            // Now start finding what granularity was provided\r\n            if (typeof dt.minute === \"number\") {\r\n                dt.end.setHours(dt.hour);\r\n                dt.start.setMinutes(dt.minute);\r\n\r\n                if (typeof dt.second === \"number\") {\r\n                    dt.end.setMinutes(dt.minute);\r\n\r\n                    dt.start.setSeconds(dt.second);\r\n                    if (dt.second % 1) {\r\n                        dt.start.setMilliseconds((dt.second % 1) * 1000);\r\n                        dt.end.setMilliseconds(dt.start.getMilliseconds() + 1);\r\n                    } else {\r\n                        dt.end.setSeconds(dt.second + 1);\r\n                    }\r\n                } else {\r\n                    dt.end.setMinutes(dt.minute + 1);\r\n                }\r\n            } else {\r\n                dt.end.setHours(dt.hour + 1);\r\n            }\r\n\r\n            return Object.assign(this, dt);\r\n        }\r\n\r\n        // if (/:/.test(input)) {\r\n        //     return Object.assign(this, { ...parseTime(input), start: null, end: null });\r\n        // }\r\n\r\n        return Object.assign(this, parseDate(input));\r\n    }\r\n}\r\n\r\n/**\r\n * @typedef TimeSpec\r\n * @property {number} [hour]\r\n * @property {number} [minute]\r\n * @property {number} [second]\r\n */\r\n\r\n/**\r\n * @typedef DateTimePeriodSpec\r\n * @property {number} [years]\r\n * @property {number} [months]\r\n * @property {number} [weeks]\r\n * @property {number} [days]\r\n * @property {number} [hours]\r\n * @property {number} [minutes]\r\n * @property {number} [seconds]\r\n */\r\n\r\nexport class DateTimeIntervalSpec {\r\n    /** @type {?DateTimeSpec} */\r\n    first = null;\r\n    /** @type {?DateTimeSpec} */\r\n    last = null;\r\n    /** @type {?DateTimePeriodSpec} */\r\n    period = null;\r\n    /** @type {?number} */\r\n    repetitions = 0;\r\n    /** @type {Date} */\r\n    start;\r\n    /** @type {?Date} */\r\n    end = null;\r\n\r\n    /**\r\n     * @param {string} input\r\n     */\r\n    constructor (input) {\r\n        const m = /^R(\\d*)\\//.exec(input);\r\n        if(m) {\r\n            if (m[1]) {\r\n                this.repetitions = +m[1];\r\n            } else {\r\n                this.repetitions = Infinity;\r\n            }\r\n\r\n            input = input.substr(m[0].length);\r\n        }\r\n\r\n        if (!/\\//.test(input)) {\r\n            throw new Error(\"Invalid range \" + input);\r\n        }\r\n\r\n        const [partA, partB] = input.split(\"/\", 2);\r\n\r\n        try {\r\n            const first = new DateTimeSpec(partA);\r\n\r\n            try {\r\n                const last = new DateTimeSpec(partB, first);\r\n\r\n                return Object.assign(this, { first, last, start: first.start, end: last.start });\r\n            } catch (e) {\r\n                try {\r\n                    const period = parsePeriod(partB);\r\n\r\n                    return Object.assign(this, { first, period, start: first.start, end: addDateTimeAndPeriod(first, period) });\r\n                }\r\n                catch (e) {\r\n                    throw new Error(\"Invalid range part \" + partB);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            try {\r\n                const period = parsePeriod(partA);\r\n\r\n                try {\r\n                    const last = new DateTimeSpec(partB);\r\n\r\n                    return Object.assign(this, { period, last, start: subtractPeriodFromDateTime(period, last), end: last.end });\r\n                } catch (e) {\r\n                    throw new Error(\"Invalid range part \" + partB);\r\n                }\r\n            } catch (e) {\r\n                throw new Error(\"Invalid range part \" + partA);\r\n            }\r\n        }\r\n\r\n        // unreachable\r\n    }\r\n}\r\n\r\n/**\r\n * @param {string} input\r\n */\r\nexport function parse (input) {\r\n    try {\r\n        return new DateTimeSpec(input);\r\n    } catch (e) {}\r\n\r\n    try {\r\n        return new DateTimeIntervalSpec(input);\r\n    } catch (e) {}\r\n\r\n    throw new Error(\"Invalid input \" + input);\r\n}\r\n\r\n/**\r\n * @param {string} input\r\n */\r\nfunction parseDate (input) {\r\n    if (/^\\d$/.test(input)) {\r\n        const start = new Date(+input * 1000, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        start.setFullYear(+input * 1000);\r\n\r\n        const end = new Date((+input + 1) * 1000, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        end.setFullYear((+input + 1) * 1000);\r\n\r\n        return {\r\n            millennium: +input,\r\n            start,\r\n            end,\r\n        };\r\n    }\r\n\r\n    if (/^\\d\\d$/.test(input)) {\r\n        const start = new Date(+input * 100, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        start.setFullYear(+input * 100);\r\n\r\n        const end = new Date((+input + 1) * 100, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        end.setFullYear((+input + 1) * 100);\r\n\r\n        return {\r\n            century: +input,\r\n            start,\r\n            end,\r\n        };\r\n    }\r\n\r\n    if (/^\\d{3}$/.test(input)) {\r\n        const start = new Date(+input * 10, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        start.setFullYear(+input * 10);\r\n\r\n        const end = new Date((+input + 1) * 10, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        end.setFullYear((+input + 1) * 10);\r\n\r\n        return {\r\n            decade: +input,\r\n            start,\r\n            end,\r\n        };\r\n    }\r\n\r\n    // Check for four or more digit year\r\n    let m = /^[+-]\\d{4,}|\\d{4}/.exec(input);\r\n\r\n    if (!m) {\r\n        throw new Error(\"Invalid date format (bad year) \" + input);\r\n    }\r\n\r\n    const year = +m[0];\r\n    input = input.substr(m[0].length);\r\n\r\n    if (input.length === 0) {\r\n        const start = new Date(year, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        start.setFullYear(year);\r\n\r\n        const end = new Date(year + 1, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        end.setFullYear(year + 1);\r\n\r\n        return {\r\n            year,\r\n            start,\r\n            end,\r\n        };\r\n    }\r\n\r\n    m = /^-(\\d{2})$/.exec(input);\r\n    if (m) {\r\n        const start = new Date(year, +m[1] - 1, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        start.setFullYear(year);\r\n\r\n        const end = new Date(year, +m[1], 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        end.setFullYear(year);\r\n\r\n        return {\r\n            year,\r\n            month: +m[1],\r\n            start,\r\n            end,\r\n        };\r\n    }\r\n\r\n    m = /^-?(\\d{2})-?(\\d{2})$/.exec(input);\r\n    if (m) {\r\n        const start = new Date(year, +m[2] - 1, +m[2]);\r\n        // Catch date constructor problems with years 0 to 99\r\n        start.setFullYear(year);\r\n\r\n        const end = new Date(year, +m[2] - 1, +m[2] + 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        end.setFullYear(year);\r\n\r\n        return {\r\n            year,\r\n            month: +m[2],\r\n            day: +m[2],\r\n            start,\r\n            end,\r\n        };\r\n    }\r\n\r\n    m = /^-?W(\\d{2})$/.exec(input);\r\n    if (m) {\r\n\r\n        const week = +m[1];\r\n        if (week < 1 || week > 53) {\r\n            throw new Error(\"Invalid date format \" + input);\r\n        }\r\n\r\n        const s = new Date(year, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        s.setFullYear(year);\r\n\r\n        // TODO: adjust for year/weekYear mis-match when necessary\r\n        const start = new Date(+s + ((week - 1) * 7 * 86400000));\r\n\r\n        // TODO: Check how often the following trick works\r\n        //       (It works for 2021 at least)\r\n        start.setDate(start.getDate() - start.getDay() + 8);\r\n\r\n        return {\r\n            weekYear: year,\r\n            week,\r\n            start,\r\n            end: new Date(start.getFullYear(), start.getMonth(), start.getDate() + 7),\r\n        };\r\n    }\r\n\r\n    m = /^-?W(\\d{2})-?(\\d)$/.exec(input);\r\n    if (m) {\r\n        const week = +m[1];\r\n        if (week < 1 || week > 53) {\r\n            throw new Error(\"Invalid date format \" + input);\r\n        }\r\n\r\n        const weekDay = +m[2];\r\n        if (weekDay < 1 || weekDay > 7) {\r\n            throw new Error(\"Invalid date format \" + input);\r\n        }\r\n\r\n        const s = new Date(year, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        s.setFullYear(year);\r\n\r\n        // TODO: adjust for year/weekYear mis-match when necessary\r\n        const start = new Date(+s + ((week - 1) * 7 * 86400000));\r\n\r\n        // TODO: Check how often the following trick works\r\n        //       (It works for 2021 at least)\r\n        start.setDate(start.getDate() - start.getDay() + 7 + weekDay);\r\n\r\n        return {\r\n            weekYear: year,\r\n            week,\r\n            weekDay,\r\n            start,\r\n            end: new Date(start.getFullYear(), start.getMonth(), start.getDate() + 7),\r\n        };\r\n    }\r\n\r\n    m = /^-?(\\d{3})$/.exec(input);\r\n    if (m) {\r\n        const s = new Date(year, 0, 1);\r\n        // Catch date constructor problems with years 0 to 99\r\n        s.setFullYear(year);\r\n\r\n        const yearDay = +m[1];\r\n\r\n        if (yearDay < 1 || yearDay > 366) {\r\n            throw new Error(\"Invalid date format \" + input);\r\n        }\r\n\r\n        const start = new Date(+s + ((yearDay - 1) * 86400000));\r\n\r\n        if (start.getFullYear() !== year) {\r\n            throw new Error(\"Invalid date format \" + input);\r\n        }\r\n\r\n        return {\r\n            year,\r\n            yearDay,\r\n            start,\r\n            end: new Date(year, start.getMonth(), start.getDate() + 1),\r\n        };\r\n    }\r\n\r\n    throw new Error(\"Invalid date format \" + input);\r\n}\r\n\r\n/**\r\n * @param {string} input\r\n * @param {DateTimeSpec} startDate\r\n */\r\nfunction parseEndDate (input, startDate) {\r\n    let [ maybeDatePart, timePart ] = input.split(\"T\", 2);\r\n\r\n    /** @type {any} */\r\n    let candidate = Object.assign({}, startDate);\r\n\r\n    let m = /^(\\d{2})$/.exec(maybeDatePart);\r\n    if (m) {\r\n        let { year, month, day, hour, minute, second } = startDate;\r\n\r\n        const start = new Date(startDate.start);\r\n        const end = new Date(startDate.end);\r\n\r\n        if (!timePart) {\r\n            if (typeof second === \"number\") {\r\n                second = +m[1];\r\n\r\n                if (second > 61) {\r\n                    throw new Error(\"Are you sure you want second to be \" + second);\r\n                }\r\n\r\n                start.setSeconds(second);\r\n                end.setSeconds(second + 1);\r\n            } else if (typeof minute === \"number\") {\r\n                minute = +m[1];\r\n\r\n                if (minute > 60) {\r\n                    throw new Error(\"Are you sure you want minute to be \" + minute);\r\n                }\r\n\r\n                start.setMinutes(minute);\r\n                end.setMinutes(minute + 1);\r\n            } else if (typeof hour === \"number\") {\r\n                hour = +m[1];\r\n\r\n                if (hour > 23) {\r\n                    throw new Error(\"Are you sure you want hout to be \" + hour);\r\n                }\r\n\r\n                start.setHours(hour);\r\n                end.setHours(hour + 1);\r\n            } else if (typeof day === \"number\") {\r\n                day = +m[1];\r\n\r\n                start.setDate(day);\r\n                end.setDate(day + 1);\r\n\r\n                if (day > getMonthLength(start)) {\r\n                    throw new Error(\"Are you sure you want day to be \" + day);\r\n                }\r\n            } else if (typeof month === \"number\") {\r\n                month = +m[1];\r\n\r\n                if (month > 12) {\r\n                    throw new Error(\"Are you sure you want month to be \" + month);\r\n                }\r\n\r\n                start.setMonth(month - 1);\r\n                end.setMonth(month);\r\n            } else {\r\n                throw new Error(\"Invalid end date \" + maybeDatePart);\r\n            }\r\n        }\r\n        else {\r\n            if (typeof day === \"number\") {\r\n                day = +m[1];\r\n                start.setDate(day);\r\n                end.setDate(day + 1);\r\n\r\n                if (day > getMonthLength(start)) {\r\n                    throw new Error(\"Are you sure you want day to be \" + day);\r\n                }\r\n            } else if (typeof month === \"number\") {\r\n                month = +m[1];\r\n                start.setMonth(month - 1);\r\n                end.setMonth(month);\r\n\r\n                if (month > 12) {\r\n                    throw new Error(\"Are you sure you want month to be \" + month);\r\n                }\r\n            } else {\r\n                throw new Error(\"Invalid end date \" + maybeDatePart);\r\n            }\r\n        }\r\n\r\n        candidate = { year, month, day, hour, minute, second, start, end };\r\n    }\r\n    else {\r\n        m = /^(\\d{2})-(\\d{2})$/.exec(maybeDatePart);\r\n        if (m) {\r\n            let { year, month, day, hour, minute, second } = startDate;\r\n\r\n            const start = new Date(startDate.start);\r\n            const end = new Date(startDate.end);\r\n\r\n            if (typeof day !== \"number\" || typeof month !== \"number\") {\r\n                throw new Error(\"Invalid end date \" + maybeDatePart);\r\n            }\r\n\r\n            month = +m[1];\r\n            day = +m[2];\r\n\r\n            start.setMonth(month - 1);\r\n            end.setMonth(month - 1);\r\n\r\n            start.setDate(day);\r\n            end.setDate(day + 1);\r\n\r\n            if (month > 12) {\r\n                throw new Error(\"Are you sure you want month to be \" + month);\r\n            }\r\n\r\n            if (day > getMonthLength(start)) {\r\n                throw new Error(\"Are you sure you want day to be \" + day);\r\n            }\r\n\r\n            candidate = { year, month, day, hour, minute, second, start, end };\r\n        } else {\r\n            try {\r\n                return parseDate(maybeDatePart);\r\n            } catch (e) {}\r\n\r\n            timePart = maybeDatePart;\r\n        }\r\n    }\r\n\r\n    if (timePart) {\r\n        m = /^(\\d{2}):(\\d{2})$/.exec(timePart);\r\n        if (m) {\r\n            let { year, month, day, hour, minute, second } = candidate;\r\n\r\n            const start = new Date(candidate.start);\r\n            const end = new Date(candidate.end);\r\n\r\n            if (typeof second === \"number\") {\r\n                minute = +m[1];\r\n                second = +m[2];\r\n\r\n                start.setMinutes(minute);\r\n                end.setMinutes(minute);\r\n\r\n                start.setSeconds(second);\r\n                end.setSeconds(second + 1);\r\n            } else if (typeof minute === \"number\") {\r\n                hour = +m[1];\r\n                minute = +m[2];\r\n\r\n                start.setHours(hour);\r\n                end.setHours(hour);\r\n\r\n                start.setMinutes(minute);\r\n                end.setMinutes(minute + 1);\r\n\r\n                if (hour > 23) {\r\n                    throw new Error(\"Are you sure you want hour to be \" + hour);\r\n                }\r\n\r\n                if (minute > 60) {\r\n                    throw new Error(\"Are you sure you want minute to be \" + minute);\r\n                }\r\n            } else {\r\n                throw new Error(\"Invalid end date \" + input);\r\n            }\r\n\r\n            candidate = { year, month, day, hour, minute, second, start, end };\r\n        } else {\r\n            const t = parseTime(timePart);\r\n\r\n            const start = new Date(candidate.start);\r\n            const end = new Date(candidate.end);\r\n\r\n            start.setHours(t.hour);\r\n            end.setHours(t.hour);\r\n\r\n            start.setMinutes(t.minute);\r\n            end.setMinutes(t.minute);\r\n\r\n            start.setSeconds(t.second);\r\n            end.setSeconds(t.second + 1);\r\n\r\n            Object.assign(candidate, t, { start, end });\r\n\r\n            if (t.hour > 23) {\r\n                throw new Error(\"Are you sure you want hours to be \" + t.hour);\r\n            }\r\n\r\n            if (t.minute > 60) {\r\n                throw new Error(\"Are you sure you want minutes to be \" + t.minute);\r\n            }\r\n\r\n            if (t.second > 61) {\r\n                throw new Error(\"Are you sure you want seconds to be \" + t.second);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (candidate) {\r\n        return candidate;\r\n    }\r\n\r\n    return new DateTimeSpec(input);\r\n}\r\n\r\n/**\r\n * @param {string} input\r\n * @returns {TimeSpec}\r\n */\r\nfunction parseTime (input) {\r\n\r\n    let m = /^(\\d{2})$/.exec(input);\r\n    if (m) {\r\n        return {\r\n            hour: +m[1],\r\n        };\r\n    }\r\n\r\n    m = /^(\\d{2}):?(\\d{2})$/.exec(input);\r\n    if (m) {\r\n        return {\r\n            hour: +m[1],\r\n            minute: +m[2],\r\n        };\r\n    }\r\n\r\n    m = /^(\\d{2}):?(\\d{2}):?(\\d\\d(?:\\.\\d+)?)$/.exec(input);\r\n    if (m) {\r\n        return {\r\n            hour: +m[1],\r\n            minute: +m[2],\r\n            second: +m[3],\r\n        };\r\n    }\r\n\r\n    throw new Error(\"Invalid time format \" + input);\r\n}\r\n\r\n/**\r\n * @param {string} input\r\n * @returns {DateTimePeriodSpec}\r\n */\r\nfunction parsePeriod (input) {\r\n    if (!/^P/.test(input)) {\r\n        throw new Error(\"Invalid period \" + input);\r\n    }\r\n\r\n    const [datePart, timePart] = input.substr(1).split(\"T\");\r\n\r\n    const out = {};\r\n\r\n    let m = /(\\d+(?:\\.\\d+)?)Y/.exec(datePart);\r\n    if (m) {\r\n        out.years = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)M/.exec(datePart);\r\n    if (m) {\r\n        out.months = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)W/.exec(datePart);\r\n    if (m) {\r\n        out.weeks = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)D/.exec(datePart);\r\n    if (m) {\r\n        out.days = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)H/.exec(timePart);\r\n    if (m) {\r\n        out.hours = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)M/.exec(timePart);\r\n    if (m) {\r\n        out.minutes = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)S/.exec(timePart);\r\n    if (m) {\r\n        out.seconds = +m[1];\r\n    }\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n *\r\n * @param {DateTimeSpec} dateTime\r\n * @param {DateTimePeriodSpec} period\r\n * @returns {Date}\r\n */\r\nexport function addDateTimeAndPeriod (dateTime, period) {\r\n    return addDateAndPeriod(dateTime.start, period);\r\n}\r\n/**\r\n *\r\n * @param {Date} date\r\n * @param {DateTimePeriodSpec} period\r\n * @returns {Date}\r\n */\r\nexport function addDateAndPeriod (date, period) {\r\n    const d = new Date(date);\r\n\r\n    if (period.years) {\r\n        d.setFullYear(d.getFullYear() + period.years);\r\n\r\n        const rem = period.years % 1;\r\n        if (rem) {\r\n            d.setMonth(d.getMonth() + rem * 12);\r\n        }\r\n    }\r\n\r\n    if (period.months) {\r\n        d.setMonth(d.getMonth() + period.months);\r\n\r\n        const rem = period.months % 1;\r\n        if (rem) {\r\n            d.setDate(d.getDate() + rem * getMonthLength(d));\r\n        }\r\n    }\r\n\r\n    if (period.weeks) {\r\n        d.setDate(d.getDate() + period.weeks * 7);\r\n\r\n        const rem = period.weeks % 1;\r\n        if (rem) {\r\n            d.setDate(d.getDate() + rem * 7);\r\n        }\r\n    }\r\n\r\n    if (period.days) {\r\n        d.setDate(d.getDate() + period.days);\r\n\r\n        const rem = period.days % 1;\r\n        if (rem) {\r\n            d.setTime(+d + rem * 24 * 60 * 60 * 1000);\r\n        }\r\n    }\r\n\r\n    if (period.hours) {\r\n        d.setHours(d.getHours() + period.hours);\r\n\r\n        const rem = period.hours % 1;\r\n        if (rem) {\r\n            d.setTime(+d + rem * 60 * 60 * 1000);\r\n        }\r\n    }\r\n\r\n    if (period.minutes) {\r\n        d.setMinutes(d.getMinutes() + period.minutes);\r\n\r\n        const rem = period.minutes % 1;\r\n        if (rem) {\r\n            d.setTime(+d + rem * 60 * 1000);\r\n        }\r\n    }\r\n\r\n    if (period.seconds) {\r\n        d.setSeconds(d.getSeconds() + period.seconds);\r\n\r\n        const rem = period.seconds % 1;\r\n        if (rem) {\r\n            d.setTime(+d + rem * 1000);\r\n        }\r\n    }\r\n\r\n    return d;\r\n}\r\n\r\n/**\r\n * @param {Date} date\r\n */\r\nfunction getMonthLength (date) {\r\n    const m = date.getMonth();\r\n\r\n    if (m === 1) {\r\n        const y = date.getFullYear();\r\n\r\n        return (y % 400 === 0 || (y % 4 === 0 && y % 100 !== 0)) ? 29 : 28;\r\n    }\r\n\r\n    return [31,0,31,30,31,30,31,31,30,31,30,31][m];\r\n}\r\n\r\n/**\r\n *\r\n * @param {DateTimePeriodSpec} period\r\n * @param {DateTimeSpec} dateTime\r\n * @returns {Date}\r\n */\r\nfunction subtractPeriodFromDateTime (period, dateTime) {\r\n    const d = new Date(dateTime.start);\r\n\r\n    if (period.years) {\r\n        d.setFullYear(d.getFullYear() - period.years);\r\n    }\r\n\r\n    if (period.months) {\r\n        d.setMonth(d.getMonth() - period.months);\r\n    }\r\n\r\n    if (period.weeks) {\r\n        d.setDate(d.getDate() - period.weeks * 7);\r\n    }\r\n\r\n    if (period.days) {\r\n        d.setDate(d.getDate() - period.days);\r\n    }\r\n\r\n    if (period.hours) {\r\n        d.setHours(d.getHours() - period.hours);\r\n    }\r\n\r\n    if (period.minutes) {\r\n        d.setMinutes(d.getMinutes() - period.minutes);\r\n    }\r\n\r\n    if (period.seconds) {\r\n        d.setSeconds(d.getSeconds() - period.seconds);\r\n    }\r\n\r\n    return d;\r\n}\r\n\r\n/**\r\n * @param {DateTimeIntervalSpec} value\r\n * @returns {Generator<DateTimeIntervalSpec>}\r\n */\r\nexport function* getIntervalInstances (value) {\r\n    let prevValue = {\r\n        start: value.start,\r\n        end: value.end,\r\n        period: value.period,\r\n        first: null,\r\n        last: null,\r\n        repetitions: 0,\r\n    };\r\n\r\n    // +1 because repetitions spec doesn't include the very start date or the end of the 0th period\r\n    for (let i = 0; i < value.repetitions + 1; i++) {\r\n        yield prevValue;\r\n        if (value.period) {\r\n            prevValue = {\r\n                start: prevValue.end,\r\n                end: addDateAndPeriod(prevValue.end, value.period),\r\n                period: value.period,\r\n                first: null,\r\n                last: null,\r\n                repetitions: null,\r\n            };\r\n        } else {\r\n            // Many errors due to leap days/seconds\r\n            // TODO: Implement {DateTime - DateTime = Period}\r\n            const delta = +prevValue.end - +prevValue.start;\r\n\r\n            prevValue = {\r\n                start: prevValue.end,\r\n                end: new Date(+prevValue.end + delta),\r\n                period: null,\r\n                first: null,\r\n                last: null,\r\n                repetitions: null,\r\n            };\r\n        }\r\n    }\r\n}","import { useState } from \"react\";\r\nimport * as ISO8601 from \"../ISO8601\";\r\nimport { DateTimeIntervalSpec, DateTimeSpec, getIntervalInstances } from \"../ISO8601\";\r\n\r\nexport default function ISO8601TestPage () {\r\n    const [ inputValue, setInputValue ] = useState(\"\");\r\n    const testValues = [\"2\", \"20\", \"202\", \"2021\", \"2021-01\", \"2021-01-18\", \"2021-01-18T15\", \"2021-01-18T15:30\", \"2021-01-18T15:30:00\", \"2021-W03\", \"2021-W03-1\", \"2021-018\", \"20210623\", \"2021174\", \"2021W25\", \"2021W253\", \"2021-018T15\", \"2021-018T15:30\", \"2021-018T15:30:00\", \"2021-018T15:30:00.5\", \"2021-018/P1M\", \"2021-018/P1DT1M\", \"R5/2021-018/P1W\", \"R3/2012-10-01T14:12:01/10T16:19:35\", \"R2/2012-10-01T14:12/12-10T16:19\", \"R2/2012-10-01T14:12:01/12-10T16:19\" ];\r\n\r\n    let convertedInput, error;\r\n\r\n    if (inputValue) {\r\n        try {\r\n            convertedInput = ISO8601.parse(inputValue);\r\n        } catch (e) {\r\n            error = e.message;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{padding: \"2em\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <input value={inputValue} onChange={e => setInputValue(e.target.value)} style={{margin:4,fontSize:\"1.5em\"}} placeholder=\"Input\" />\r\n            { error && <p style={{color:\"red\"}}>{error}</p> }\r\n            { convertedInput && <DateTimePreview value={convertedInput} label={`Input: ${inputValue}`} /> }\r\n            <h2>Test Values</h2>\r\n            {\r\n                testValues.map((v, i) => <DateTimePreview value={ISO8601.parse(v)} label={`Input: ${v}`} key={i} />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * @param {object} props\r\n * @param {import(\"../ISO8601\").DateTimeSpec|import(\"../ISO8601\").DateTimeIntervalSpec} props.value\r\n * @param {string} [props.label]\r\n * @returns\r\n */\r\nfunction DateTimePreview ({ value, label = \"\" }) {\r\n    const [ showCode, setShowCode ] = useState(false);\r\n\r\n    // @ts-ignore\r\n    const dateFormatter = (typeof value.year === \"number\" && value.year < 0) ?\r\n        { format: (/** @type {Date} */ d) => d.toISOString() }\r\n        : new Intl.DateTimeFormat([], { dateStyle: \"long\", timeStyle: \"long\" });\r\n\r\n    const pStyle = { margin: 0 };\r\n    const labelStyle = { ...pStyle, fontFamily: \"monospace\", color: \"#333\" };\r\n    const hintStyle = {color:\"#666\",fontSize:\"0.8em\"};\r\n    const boxStyle = { margin: 4, padding: 8, border: \"1px solid #333\", cursor: \"pointer\" };\r\n\r\n    const type = value instanceof DateTimeSpec ? \"DateTime\" : \"DateTimeInterval\";\r\n\r\n    const repetitions = value instanceof DateTimeIntervalSpec ? getRepetitions(value, 100) : [];\r\n\r\n    if (!isValidDate(value.start) || !isValidDate(value.end)) {\r\n        return <code style={{color:\"darkred\"}}>Javascript Date error {JSON.stringify(value)}</code>;\r\n    }\r\n\r\n    return (\r\n        <div style={boxStyle} onClick={() => setShowCode(!showCode)}>\r\n            { label && <p style={labelStyle}>{label}</p> }\r\n            <p style={pStyle}>\r\n                <time dateTime={value.start.toISOString()}>{dateFormatter.format(value.start)}</time>\r\n                <span style={hintStyle}> ≤ {type} &lt; </span>\r\n                <time dateTime={value.end.toISOString()}>{dateFormatter.format(value.end)}</time>\r\n            </p>\r\n            {\r\n                repetitions.map((d,i) =>\r\n                    <p style={pStyle} key={i}>\r\n                        <time dateTime={d.start.toISOString()}>{dateFormatter.format(d.start)}</time>\r\n                        <span style={hintStyle}> ≤ {type} &lt; </span>\r\n                        <time dateTime={d.end.toISOString()}>{dateFormatter.format(d.end)}</time>\r\n                        {' '}<span style={hintStyle}>({getOrdinal(i + 1)} Repetition)</span>\r\n                    </p>\r\n                )\r\n            }\r\n            { value instanceof DateTimeIntervalSpec && repetitions.length < value.repetitions &&\r\n                <p style={{...pStyle, ...hintStyle}}>&hellip; {value.repetitions - repetitions.length} more not shown</p>\r\n            }\r\n            { showCode && <code>{JSON.stringify(value)}</code> }\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * @param {ISO8601.DateTimeIntervalSpec} value\r\n */\r\nfunction getRepetitions(value, maxRepetitions = 10) {\r\n    if (value.repetitions === Infinity) {\r\n        return generatorToArray(getIntervalInstances(value), maxRepetitions + 1).slice(1);\r\n    }\r\n\r\n    return [ ...ISO8601.getIntervalInstances(value) ].slice(1, 1 + maxRepetitions);\r\n}\r\n\r\nfunction getOrdinal (n) {\r\n    if (n === 11 || n === 12 || n === 13) return `${n}th`;\r\n    if (n % 10 === 1) return `${n}st`;\r\n    if (n % 10 === 2) return `${n}nd`;\r\n    if (n % 10 === 3) return `${n}rd`;\r\n    return `${n}th`;\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {Generator<T, void, unknown>} generator\r\n * @param {number} maxLength\r\n * @returns {T[]}\r\n */\r\nfunction generatorToArray (generator, maxLength) {\r\n    const list = [];\r\n    let i = 0;\r\n\r\n    while (i++ < maxLength) {\r\n        const result = generator.next();\r\n\r\n        if (!result.done && typeof result.value !== \"undefined\") {\r\n            list.push(result.value);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\n/**\r\n * @param {Date} date\r\n */\r\nfunction isValidDate (date) {\r\n    return !isNaN(+date);\r\n}","import ISO8601TestPage from './Pages/ISO8601TestPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ISO8601TestPage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}