{"version":3,"sources":["ISO8601/util.js","ISO8601/calc.js","ISO8601/parseDate.js","ISO8601/parseTime.js","ISO8601/validateDateSpec.js","ISO8601/DateTime.js","ISO8601/validateTimeSpec.js","ISO8601/parsePeriod.js","ISO8601/DateTimeInterval.js","ISO8601/parseEndDate.js","ISO8601/intervals.js","ISO8601/index.js","Pages/ISO8601TestPage.js","App.js","index.js"],"names":["getMonthLength","date","y","m","Date","getFullYear","getMonth","year","month","isValidDate","isNaN","rationalise","n","sign","Math","int","abs","floor","num_a","num_b","denom_a","denom_b","i","num","denom","addDateAndPeriod","period","d","years","setFullYear","rem","setMonth","months","setDate","getDate","weeks","days","setTime","hours","setHours","getHours","minutes","setMinutes","getMinutes","seconds","setSeconds","getSeconds","parseDate","input","test","millennium","century","decade","exec","substr","length","day","week","weekDay","yearDay","parseTime","out","replace","zoneHour","zoneMinute","hour","minute","second","validateDateSpec","spec","Object","keys","check","DateTime","start","isValidWeek","options","assign","this","Error","offset","getDay","millisecond","setMilliseconds","delta","getTimezoneOffset","end","milliseconds","getTime","toISOString","split","dateInput","timeInput","dateSpec","timeSpec","validateTimeSpec","parsePeriod","datePart","timePart","DateTimeInterval","first","last","dateTime","subtractPeriodFromDateTime","repetitions","Infinity","partA","partB","specA","parse","specB","startDate","maybeDatePart","candidate","t","parseEndDate","getIntervalInstances","value","prevValue","dateTimeSpec","dateTimeIntervalSpec","ISO8601TestPage","convertedInput","error","useState","getHashValue","inputValue","setInputValue","showExamples","setShowExamples","useEffect","title","window","history","replaceState","document","cb","addEventListener","removeEventListener","ISO8601","exampleHeaderClass","style","padding","display","flexDirection","onChange","e","target","margin","fontSize","placeholder","color","DateTimePreview","label","onClick","className","ArrowIndicator","invert","width","map","v","location","hash","decodeURIComponent","showCode","setShowCode","pStyle","labelStyle","fontFamily","hintStyle","type","maxRepetitions","generatorToArray","slice","getRepetitions","border","cursor","dateFormat","getOrdinal","JSON","stringify","generator","maxLength","list","result","next","done","push","Intl","DateTimeFormat","dateStyle","timeStyle","format","toString","padStart","viewBox","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e12b179d.chunk.js","sourcesContent":["/**\r\n * @param {Date|import(\".\").DateSpec} date\r\n */\r\nexport function getMonthLength (date) {\r\n    let y, m;\r\n\r\n    if (date instanceof Date) {\r\n        y = date.getFullYear();\r\n        m = date.getMonth();\r\n    } else {\r\n        y = date.year;\r\n        m = date.month - 1;\r\n    }\r\n\r\n    if (m === 1) {\r\n        return (y % 400 === 0 || (y % 4 === 0 && y % 100 !== 0)) ? 29 : 28;\r\n    }\r\n\r\n    return [31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][m];\r\n}\r\n\r\n/**\r\n * @param {Date} date\r\n */\r\nexport function isValidDate(date) {\r\n    return date instanceof Date && !isNaN(+date);\r\n}\r\n\r\n/**\r\n * @param {number} n\r\n */\r\nexport function rationalise (n) {\r\n    const sign = Math.sign(n);\r\n    n = Math.abs(n);\r\n\r\n    let int = 0;\r\n    if (n >= 1) {\r\n        int = Math.floor(n);\r\n        n -= int;\r\n    }\r\n\r\n    const e = 1e-10; // Number.MIN_VALUE; // 5e-324\r\n\r\n    // Check for integers\r\n    if (n < e) {\r\n        return [ 1, sign * int ];\r\n    }\r\n\r\n    let num_a = 0;\r\n    let num_b = 1;\r\n    let denom_a = 1;\r\n    let denom_b = 1;\r\n\r\n    let i = 0;\r\n    const iteration_limit = 1e6;\r\n\r\n    let num = num_a + num_b;\r\n    let denom = denom_a + denom_b;\r\n    while (Math.abs((num / denom) - n) > e && i < iteration_limit) {\r\n        if ((num / denom) > n) {\r\n            num_b = num;\r\n            denom_b = denom;\r\n        } else {\r\n            num_a = num;\r\n            denom_a = denom;\r\n        }\r\n\r\n        num = num_a + num_b;\r\n        denom = denom_a + denom_b;\r\n        i++;\r\n    }\r\n\r\n    return [ denom,  sign * (int * denom + num) ];\r\n}","import { getMonthLength } from \"./util\";\r\n\r\n/**\r\n *\r\n * @param {DateTimeSpec} dateTime\r\n * @param {DateTimePeriodSpec} period\r\n * @returns {Date}\r\n */\r\n\r\nexport function addDateTimeAndPeriod(dateTime, period) {\r\n    return addDateAndPeriod(dateTime.start, period);\r\n}\r\n/**\r\n *\r\n * @param {DateTimePeriodSpec} period\r\n * @param {DateTimeSpec} dateTime\r\n * @returns {Date}\r\n */\r\nexport function subtractPeriodFromDateTime (period, dateTime) {\r\n    const d = new Date(dateTime.start);\r\n\r\n    if (period.years) {\r\n        d.setFullYear(d.getFullYear() - period.years);\r\n    }\r\n\r\n    if (period.months) {\r\n        d.setMonth(d.getMonth() - period.months);\r\n    }\r\n\r\n    if (period.weeks) {\r\n        d.setDate(d.getDate() - period.weeks * 7);\r\n    }\r\n\r\n    if (period.days) {\r\n        d.setDate(d.getDate() - period.days);\r\n    }\r\n\r\n    if (period.hours) {\r\n        d.setHours(d.getHours() - period.hours);\r\n    }\r\n\r\n    if (period.minutes) {\r\n        d.setMinutes(d.getMinutes() - period.minutes);\r\n    }\r\n\r\n    if (period.seconds) {\r\n        d.setSeconds(d.getSeconds() - period.seconds);\r\n    }\r\n\r\n    return d;\r\n}\r\n\r\n/**\r\n *\r\n * @param {Date} date\r\n * @param {DateTimePeriodSpec} period\r\n * @returns {Date}\r\n */\r\nexport function addDateAndPeriod(date, period) {\r\n    const d = new Date(date);\r\n\r\n    if (period.years) {\r\n        d.setFullYear(d.getFullYear() + period.years);\r\n\r\n        const rem = period.years % 1;\r\n        if (rem) {\r\n            d.setMonth(d.getMonth() + rem * 12);\r\n        }\r\n    }\r\n\r\n    if (period.months) {\r\n        d.setMonth(d.getMonth() + period.months);\r\n\r\n        const rem = period.months % 1;\r\n        if (rem) {\r\n            d.setDate(d.getDate() + rem * getMonthLength(d));\r\n        }\r\n    }\r\n\r\n    if (period.weeks) {\r\n        d.setDate(d.getDate() + period.weeks * 7);\r\n\r\n        const rem = period.weeks % 1;\r\n        if (rem) {\r\n            d.setDate(d.getDate() + rem * 7);\r\n        }\r\n    }\r\n\r\n    if (period.days) {\r\n        d.setDate(d.getDate() + period.days);\r\n\r\n        const rem = period.days % 1;\r\n        if (rem) {\r\n            d.setTime(+d + rem * 24 * 60 * 60 * 1000);\r\n        }\r\n    }\r\n\r\n    if (period.hours) {\r\n        d.setHours(d.getHours() + period.hours);\r\n\r\n        const rem = period.hours % 1;\r\n        if (rem) {\r\n            d.setTime(+d + rem * 60 * 60 * 1000);\r\n        }\r\n    }\r\n\r\n    if (period.minutes) {\r\n        d.setMinutes(d.getMinutes() + period.minutes);\r\n\r\n        const rem = period.minutes % 1;\r\n        if (rem) {\r\n            d.setTime(+d + rem * 60 * 1000);\r\n        }\r\n    }\r\n\r\n    if (period.seconds) {\r\n        d.setSeconds(d.getSeconds() + period.seconds);\r\n\r\n        const rem = period.seconds % 1;\r\n        if (rem) {\r\n            d.setTime(+d + rem * 1000);\r\n        }\r\n    }\r\n\r\n    return d;\r\n}\r\n","/**\r\n * Parses a date string into a DateSpec object\r\n * Returns null if no valid format could be matched\r\n * @param {string} input\r\n * @returns {import(\".\").DateSpec}\r\n */\r\nexport function parseDate (input) {\r\n    if (/^\\d$/.test(input)) {\r\n        return {\r\n            millennium: +input,\r\n        };\r\n    }\r\n\r\n    if (/^\\d\\d$/.test(input)) {\r\n        return {\r\n            century: +input,\r\n        };\r\n    }\r\n\r\n    if (/^\\d{3}$/.test(input)) {\r\n        return {\r\n            decade: +input,\r\n        };\r\n    }\r\n\r\n    // Check for four or more digit year\r\n    let m = /^([+-]\\d{4,}|\\d{4})/.exec(input);\r\n\r\n    if (!m) {\r\n        return null;\r\n    }\r\n\r\n    const year = +m[0];\r\n    input = input.substr(m[0].length);\r\n\r\n    if (input.length === 0) {\r\n        return {\r\n            year,\r\n        };\r\n    }\r\n\r\n    m = /^-(\\d{2})$/.exec(input);\r\n    if (m) {\r\n        const month = +m[1];\r\n\r\n        return {\r\n            year,\r\n            month,\r\n        };\r\n    }\r\n\r\n    m = /^-?(\\d{2})-?(\\d{2})$/.exec(input);\r\n    if (m) {\r\n        const month = +m[1];\r\n        const day = +m[2];\r\n\r\n        return {\r\n            year,\r\n            month,\r\n            day,\r\n        };\r\n    }\r\n\r\n    m = /^-?W(\\d{2})$/.exec(input);\r\n    if (m) {\r\n        const week = +m[1];\r\n\r\n        return {\r\n            year,\r\n            week,\r\n        };\r\n    }\r\n\r\n    m = /^-?W(\\d{2})-?(\\d)$/.exec(input);\r\n    if (m) {\r\n        const week = +m[1];\r\n        const weekDay = +m[2];\r\n\r\n        return {\r\n            year,\r\n            week,\r\n            weekDay,\r\n        };\r\n    }\r\n\r\n    m = /^-?(\\d{3})$/.exec(input);\r\n    if (m) {\r\n        const yearDay = +m[1];\r\n\r\n        return {\r\n            year,\r\n            yearDay,\r\n        };\r\n    }\r\n\r\n    return null;\r\n}\r\n","/**\r\n * Parses string as a time spec\r\n * Returns null if it was not a recognised format\r\n * @param {string} input\r\n * @returns {import(\".\").TimeSpec}\r\n */\r\nexport function parseTime(input) {\r\n    let m;\r\n\r\n    let out = {};\r\n\r\n    // Comma is allowed as decimal separator\r\n    input = input.replace(/,/g,\".\");\r\n\r\n    // Parse Time Zone\r\n    m = /(?:([+−-]\\d\\d)(?::?(\\d\\d))?|Z)$/.exec(input);\r\n\r\n    if (m) {\r\n        if (m[1]) {\r\n            out.zoneHour = +m[1].replace(\"−\", \"-\");\r\n\r\n            if (m[2]) {\r\n                out.zoneMinute = +m[2];\r\n            }\r\n        } else {\r\n            // We must have had \"Z\"\r\n            out.zoneHour = 0;\r\n            out.zoneMinute = 0;\r\n        }\r\n\r\n        input = input.substr(0, input.length - m[0].length);\r\n    }\r\n\r\n    // Support 20210623TZ\r\n    if (m && input.length === 0) {\r\n        return out;\r\n    }\r\n\r\n    m = /^(\\d\\d(?:\\.\\d+)?)$/.exec(input);\r\n    if (m) {\r\n        out.hour = +m[1];\r\n\r\n        return out;\r\n    }\r\n\r\n    m = /^(\\d\\d):?(\\d\\d(?:\\.\\d+)?)$/.exec(input);\r\n    if (m) {\r\n        out.hour = +m[1];\r\n        out.minute = +m[2];\r\n\r\n        return out;\r\n    }\r\n\r\n    m = /^(\\d{2}):?(\\d{2}):?(\\d\\d(?:\\.\\d+)?)$/.exec(input);\r\n    if (m) {\r\n        out.hour = +m[1];\r\n        out.minute = +m[2];\r\n        out.second = +m[3];\r\n\r\n        return out;\r\n    }\r\n\r\n    return null;\r\n}\r\n","import { DateTime, isValidDate } from \".\";\r\nimport { getMonthLength } from \"./util\";\r\n\r\n/**\r\n * Checks if date spec object is valid\r\n * Always returns a boolean\r\n * @param {import(\".\").DateSpec} spec\r\n * @returns {boolean}\r\n */\r\nexport function validateDateSpec (spec) {\r\n    if (spec === null) {\r\n        return false;\r\n    };\r\n\r\n    const { millennium, century, decade, year, month, day, week, weekDay, yearDay } = spec;\r\n\r\n    // Millennium, Centry and Decase must be alone\r\n    if (typeof millennium === \"number\" || typeof century === \"number\" || typeof decade === \"number\") {\r\n        return Object.keys(spec).length === 1;\r\n    }\r\n\r\n    // For everything else we must have a year\r\n    if (typeof year !== \"number\")\r\n        return false;\r\n\r\n    if (typeof month === \"number\") {\r\n        if (month < 1 || month > 12) {\r\n            return false;\r\n        }\r\n\r\n        if (typeof day === \"number\") {\r\n            if (day < 1) {\r\n                return false;\r\n            }\r\n\r\n            const monthDays = getMonthLength({ year, month, day });\r\n\r\n            if (day > monthDays) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    if (typeof week === \"number\") {\r\n\r\n        if (week < 1 || week > 53) {\r\n            return false;\r\n        }\r\n\r\n        // Catch bad week 53\r\n        if (!isValidWeek({ year, week })) {\r\n            return false;\r\n        }\r\n\r\n        if (typeof weekDay === \"number\") {\r\n            if (weekDay < 1 || weekDay > 7) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    if (typeof yearDay === \"number\") {\r\n        if (yearDay < 1 || yearDay > 366) {\r\n            return false;\r\n        }\r\n\r\n        // Weed out invalid day 366\r\n        const check = new DateTime({ year, yearDay});\r\n        if (yearDay === 366 && isValidDate(check.start) && check.start.getFullYear() !== year) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // `day` and `weekDay` are invalid without `month` and `week` respectively\r\n    if (typeof day === \"number\" || typeof weekDay === \"number\") {\r\n        return false;\r\n    }\r\n\r\n    // Must just be a year\r\n    return Object.keys(spec).length === 1;\r\n}\r\n\r\nfunction isValidWeek({ year, week }) {\r\n    if (week < 1 || week > 53) {\r\n        return false;\r\n    }\r\n\r\n    // Week 53 needs extra validation\r\n    if (week === 53) {\r\n        const check = new DateTime({ year, week });\r\n\r\n        // If it's not a vaild date then it's probably too far into the future\r\n        // we won't bother validating in that case\r\n        if (!isValidDate(check.start)) {\r\n            return true;\r\n        }\r\n\r\n        // Monday's year must be same as calnedar year\r\n        if (check.start.getFullYear() !== year) {\r\n            return false;\r\n        }\r\n\r\n        // Monday's date must be either 27 or 28\r\n        const d = check.start.getDate();\r\n        if (d < 27 || d > 28) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","import { parseDate } from \"./parseDate\";\r\nimport { parseTime } from \"./parseTime\";\r\nimport { rationalise } from \"./util\";\r\nimport { validateDateSpec } from \"./validateDateSpec\";\r\nimport { validateTimeSpec } from \"./validateTimeSpec\";\r\n\r\nexport class DateTime {\r\n    /** @type {?number} */\r\n    millennium;\r\n    /** @type {?number} */\r\n    century;\r\n    /** @type {?number} */\r\n    decade;\r\n    /** @type {?number} */\r\n    year;\r\n    /** @type {?number} */\r\n    month;\r\n    /** @type {?number} */\r\n    day;\r\n    /** @type {?number} */\r\n    hour;\r\n    /** @type {?number} */\r\n    minute;\r\n    /** @type {?number} */\r\n    second;\r\n    /** @type {?number} */\r\n    zoneHour;\r\n    /** @type {?number} */\r\n    zoneMinute;\r\n    /** @type {?number} */\r\n    week;\r\n    /** @type {?number} */\r\n    weekDay;\r\n    /** @type {?number} */\r\n    yearDay;\r\n\r\n    /**\r\n     *\r\n     * @param {import(\".\").DateSpec & import(\".\").TimeSpec} options\r\n     */\r\n    constructor (options) {\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    get start () {\r\n        const { year, yearDay, week, weekDay, month = 1, day = 1 } = this;\r\n\r\n        let start;\r\n\r\n        // Handle Date Part\r\n\r\n        if (typeof this.millennium === \"number\") {\r\n            start = new Date(this.millennium * 1000, 0, 1);\r\n            // Catch date constructor problems with years 0 to 99\r\n            start.setFullYear(this.millennium * 1000);\r\n        }\r\n\r\n        else if (typeof this.century === \"number\") {\r\n            start = new Date(this.century * 100, 0, 1);\r\n            // Catch date constructor problems with years 0 to 99\r\n            start.setFullYear(this.century * 100);\r\n        }\r\n\r\n        else if (typeof this.decade === \"number\") {\r\n            start = new Date(this.decade * 10, 0, 1);\r\n            // Catch date constructor problems with years 0 to 99\r\n            start.setFullYear(this.decade * 10);\r\n        }\r\n\r\n        else {\r\n            if (typeof year !== \"number\") {\r\n                throw Error(\"Invalid DateTime\");\r\n            }\r\n\r\n            // Defaults to first of year\r\n            start = new Date(year, month - 1, day);\r\n            // Catch date constructor problems with years 0 to 99\r\n            start.setFullYear(year);\r\n\r\n            if (typeof yearDay === \"number\") {\r\n                start = new Date(+start + ((yearDay - 1) * 86400000));\r\n            }\r\n\r\n            else if (typeof week === \"number\") {\r\n\r\n                // getDay(): 0 - 6; Sun - Mon\r\n                const offset = [2, 1, 0, -1, -2, 4, 3][start.getDay()];\r\n\r\n                start.setDate(offset);\r\n\r\n                start = new Date(+start + ((week - 1) * 7 * 86400000));\r\n\r\n                if (typeof weekDay === \"number\") {\r\n                    start.setDate(start.getDate() + weekDay - 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Handle Time Part (including fractions)\r\n        const {\r\n            hour,\r\n            minute = (hour % 1) * 60,\r\n            second =  (minute % 1) * 60,\r\n        } = this;\r\n        const millisecond = (second % 1) * 1000;\r\n\r\n        if (typeof hour === \"number\") {\r\n            start.setHours(hour);\r\n\r\n            if (typeof minute === \"number\") {\r\n                start.setMinutes(minute);\r\n\r\n                if (typeof second === \"number\") {\r\n                    start.setSeconds(second);\r\n\r\n                    if (typeof millisecond === \"number\") {\r\n                        start.setMilliseconds(millisecond);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Handle Time Zone\r\n        if (typeof this.zoneHour === \"number\") {\r\n            let offset = this.zoneHour * 60;\r\n\r\n            if (typeof this.zoneMinute === \"number\") {\r\n                offset += Math.sign(this.zoneHour) * this.zoneMinute;\r\n            }\r\n\r\n            const currOffset = start.getTimezoneOffset();\r\n            const delta = -(offset + currOffset) * 60 * 1000;\r\n\r\n            start.setTime(+start + delta);\r\n        }\r\n\r\n\r\n        return start;\r\n    }\r\n\r\n    get end () {\r\n        const end = new Date(this.start);\r\n\r\n        if (typeof this.second === \"number\") {\r\n            // Handle Fractions\r\n            if (this.second % 1) {\r\n                const [ denom ] = rationalise(this.second % 1);\r\n                const milliseconds = (1 / denom) * 1000;\r\n                end.setTime(+end.getTime() + milliseconds);\r\n            } else {\r\n                end.setSeconds(this.second + 1);\r\n            }\r\n        }\r\n        else if (typeof this.minute === \"number\") {\r\n            // Handle Fractions\r\n            if (this.minute % 1) {\r\n                const [ denom ] = rationalise(this.minute % 1);\r\n                const seconds = (1 / denom) * 60;\r\n                end.setTime(+end.getTime() + seconds * 1000);\r\n            } else {\r\n                end.setMinutes(this.minute + 1);\r\n            }\r\n        }\r\n        else if (typeof this.hour === \"number\") {\r\n            // Handle Fractions\r\n            if (this.hour % 1) {\r\n                const [ denom ] = rationalise(this.hour % 1);\r\n                const minutes = (1 / denom) * 60;\r\n                end.setTime(+end.getTime() + minutes * 60 * 1000);\r\n            } else {\r\n                end.setHours(this.hour + 1);\r\n            }\r\n        }\r\n        else if (typeof this.day === \"number\") {\r\n            end.setDate(this.day + 1);\r\n        }\r\n        else if (typeof this.month === \"number\") {\r\n            end.setMonth(this.month);\r\n        }\r\n        else if (typeof this.yearDay === \"number\") {\r\n            end.setDate(end.getDate() + 1);\r\n        }\r\n        else if (typeof this.weekDay === \"number\") {\r\n            end.setDate(end.getDate() + 1);\r\n        }\r\n        else if (typeof this.week === \"number\") {\r\n            end.setDate(end.getDate() + 7);\r\n        }\r\n        else if (typeof this.year === \"number\") {\r\n            end.setFullYear(this.year + 1);\r\n        }\r\n        else if (typeof this.decade === \"number\") {\r\n            end.setFullYear((this.decade + 1) * 10);\r\n        }\r\n        else if (typeof this.century === \"number\") {\r\n            end.setFullYear((this.century + 1) * 100);\r\n        }\r\n        else if (typeof this.millennium === \"number\") {\r\n            end.setFullYear((this.millennium + 1) * 1000);\r\n        }\r\n\r\n        return end;\r\n    }\r\n\r\n    toJSON () {\r\n        return ({\r\n            ...this,\r\n            start: this.start.toISOString(),\r\n            end: this.end.toISOString(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parse and validate input returns a DateTime spec object if valid\r\n     * or null if invalid.\r\n     * This DateTime spec object can then be passed to the constructor of\r\n     * the DateTime class if it is valid\r\n     * @param {string} input\r\n     * @returns {import(\".\").DateSpec & import(\".\").TimeSpec}\r\n     */\r\n    static parse (input) {\r\n\r\n        if (/T/.test(input)) {\r\n            const [dateInput, timeInput] = input.split(\"T\", 2);\r\n\r\n            const dateSpec = parseDate(dateInput);\r\n            const timeSpec = parseTime(timeInput);\r\n\r\n            // Both parts must be valid\r\n            if (!validateDateSpec(dateSpec) || !validateTimeSpec(timeSpec)) {\r\n                return null;\r\n            }\r\n\r\n            // The date part must specify a specific day\r\n            if (typeof dateSpec.day !== \"number\"\r\n                && typeof dateSpec.weekDay !== \"number\"\r\n                && typeof dateSpec.yearDay !== \"number\"\r\n            ) {\r\n                return null\r\n            }\r\n\r\n            return { ...dateSpec, ...timeSpec };\r\n        }\r\n\r\n        const spec = parseDate(input);\r\n\r\n        if (validateDateSpec(spec)) {\r\n            return spec;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","/**\r\n * Checks is time spec object is valid\r\n * Always returns a boolean\r\n * @param {import(\".\").TimeSpec} spec\r\n * @returns {boolean}\r\n */\r\nexport function validateTimeSpec (spec) {\r\n    if (spec === null) {\r\n        return false;\r\n    }\r\n\r\n    const { hour, minute, second, zoneMinute } = spec;\r\n\r\n    if (typeof zoneMinute === \"number\") {\r\n        if (zoneMinute < 0 || zoneMinute > 60) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    if (typeof hour === \"number\") {\r\n        // Allow fractions up to 24\r\n        if (hour < 0 || hour >= 24) {\r\n            return false;\r\n        }\r\n\r\n        if (typeof minute === \"number\") {\r\n            // Allow fractions up to 60\r\n            if (minute < 0 || minute >= 60) {\r\n                return false;\r\n            }\r\n\r\n            // Only the smallest element is allowed fractions\r\n            if (hour % 1) {\r\n                return false;\r\n            }\r\n\r\n            if (typeof second === \"number\") {\r\n                 // Allow fractions up to leap second\r\n                if (second < 0 || second >= 61) {\r\n                    return false;\r\n                }\r\n\r\n                // Only the smallest element is allowed fractions\r\n                if (minute % 1) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    return true;\r\n}","/**\r\n * @param {string} input\r\n * @returns {import(\".\").DateTimePeriodSpec}\r\n */\r\nexport function parsePeriod(input) {\r\n    if (!/^P/.test(input)) {\r\n        return null;\r\n    }\r\n\r\n    const [datePart, timePart] = input.replace(/,/g,\".\").substr(1).split(\"T\");\r\n\r\n    const out = {};\r\n\r\n    let m = /(\\d+(?:\\.\\d+)?)Y/.exec(datePart);\r\n    if (m) {\r\n        out.years = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)M/.exec(datePart);\r\n    if (m) {\r\n        out.months = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)W/.exec(datePart);\r\n    if (m) {\r\n        out.weeks = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)D/.exec(datePart);\r\n    if (m) {\r\n        out.days = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)H/.exec(timePart);\r\n    if (m) {\r\n        out.hours = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)M/.exec(timePart);\r\n    if (m) {\r\n        out.minutes = +m[1];\r\n    }\r\n\r\n    m = /(\\d+(?:\\.\\d+)?)S/.exec(timePart);\r\n    if (m) {\r\n        out.seconds = +m[1];\r\n    }\r\n\r\n    return out;\r\n}\r\n","import { addDateTimeAndPeriod, subtractPeriodFromDateTime } from \"./calc\";\r\nimport { DateTime } from \"./DateTime\";\r\nimport { parseEndDate } from \"./parseEndDate\";\r\nimport { parsePeriod } from \"./parsePeriod\";\r\n\r\nexport class DateTimeInterval {\r\n    /** @type {?DateTime} */\r\n    first;\r\n    /** @type {?DateTime} */\r\n    last;\r\n    /** @type {?import(\".\").DateTimePeriodSpec} */\r\n    period;\r\n    /** @type {?number} */\r\n    repetitions;\r\n\r\n    /**\r\n     * @param {import(\".\").DateTimeIntervalSpec} options\r\n     */\r\n    constructor(options) {\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    get start () {\r\n        if (this.first) {\r\n            return this.first.start;\r\n        }\r\n\r\n        if (this.period && this.last) {\r\n            return subtractPeriodFromDateTime(this.period, this.last);\r\n        }\r\n\r\n        throw new Error(\"DateTimeInterval was underspecified\")\r\n    }\r\n\r\n    get end () {\r\n        if (this.last) {\r\n            return this.last.start;\r\n        }\r\n\r\n        if (this.first && this.period) {\r\n            return addDateTimeAndPeriod(this.first, this.period);\r\n        }\r\n\r\n        throw new Error(\"DateTimeInterval was underspecified\");\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} input\r\n     * @returns {import(\".\").DateTimeIntervalSpec}\r\n     */\r\n    static parse (input) {\r\n        let repetitions = 0;\r\n\r\n        const m = /^R(\\d*)\\//.exec(input);\r\n        if (m) {\r\n            if (m[1]) {\r\n                repetitions = +m[1];\r\n            } else {\r\n                repetitions = Infinity;\r\n            }\r\n\r\n            input = input.substr(m[0].length);\r\n        }\r\n\r\n        if (!/\\//.test(input)) {\r\n            // \"Invalid range \" + input;\r\n            return null;\r\n        }\r\n\r\n        const [partA, partB] = input.split(\"/\", 2);\r\n\r\n        const specA = DateTime.parse(partA);\r\n\r\n        if (specA) {\r\n            const first = new DateTime(specA);\r\n\r\n            const specB = parseEndDate(partB, first);\r\n\r\n            if (specB) {\r\n                const last = new DateTime(specB);\r\n                return { first, last, repetitions };\r\n            }\r\n\r\n            const period = parsePeriod(partB);\r\n\r\n            if (period) {\r\n                return { first, period, repetitions };\r\n            }\r\n\r\n            // \"Range part is not a valid period \" + partB;\r\n            return null;\r\n        }\r\n\r\n        // console.debug(e.message);\r\n\r\n        const period = parsePeriod(partA);\r\n\r\n        if (period) {\r\n            const specB = DateTime.parse(partB);\r\n\r\n            if (specB) {\r\n                const last = new DateTime(specB);\r\n\r\n                return { period, last, repetitions };\r\n            }\r\n        }\r\n\r\n        // \"Range part is not valid DateTime: \" + partB;\r\n        return null;\r\n    }\r\n}\r\n","import { parseDate } from \"./parseDate\";\r\nimport { parseTime } from \"./parseTime\";\r\nimport { getMonthLength } from \"./util\";\r\n\r\n/**\r\n * @param {string} input\r\n * @param {import('.').DateTime} startDate\r\n */\r\nexport function parseEndDate(input, startDate) {\r\n    let [maybeDatePart, timePart] = input.split(\"T\", 2);\r\n\r\n    /** @type {any} */\r\n    let candidate = Object.assign({}, startDate);\r\n\r\n    let m = /^(\\d{2})$/.exec(maybeDatePart);\r\n    if (m) {\r\n        let { year, month, day, hour, minute, second } = startDate;\r\n\r\n        const start = new Date(startDate.start);\r\n        const end = new Date(startDate.end);\r\n\r\n        if (!timePart) {\r\n            if (typeof second === \"number\") {\r\n                second = +m[1];\r\n\r\n                if (second > 61) {\r\n                    // \"Are you sure you want second to be \" + second;\r\n                    return null;\r\n                }\r\n\r\n                start.setSeconds(second);\r\n                end.setSeconds(second + 1);\r\n            } else if (typeof minute === \"number\") {\r\n                minute = +m[1];\r\n\r\n                if (minute > 60) {\r\n                    // \"Are you sure you want minute to be \" + minute;\r\n                    return null;\r\n                }\r\n\r\n                start.setMinutes(minute);\r\n                end.setMinutes(minute + 1);\r\n            } else if (typeof hour === \"number\") {\r\n                hour = +m[1];\r\n\r\n                if (hour > 23) {\r\n                    // \"Are you sure you want hout to be \" + hour;\r\n                    return null;\r\n                }\r\n\r\n                start.setHours(hour);\r\n                end.setHours(hour + 1);\r\n            } else if (typeof day === \"number\") {\r\n                day = +m[1];\r\n\r\n                start.setDate(day);\r\n                end.setDate(day + 1);\r\n\r\n                if (day < 1 || day > getMonthLength(start)) {\r\n                    // \"Are you sure you want day to be \" + day;\r\n                    return null;\r\n                }\r\n            } else if (typeof month === \"number\") {\r\n                month = +m[1];\r\n\r\n                if (month < 1 || month > 12) {\r\n                    // \"Are you sure you want month to be \" + month;\r\n                    return null;\r\n                }\r\n\r\n                start.setMonth(month - 1);\r\n                end.setMonth(month);\r\n            } else {\r\n                // \"Invalid end date \" + maybeDatePart;\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            if (typeof day === \"number\") {\r\n                day = +m[1];\r\n                start.setDate(day);\r\n                end.setDate(day + 1);\r\n\r\n                if (day > getMonthLength(start)) {\r\n                    // \"Are you sure you want day to be \" + day;\r\n                    return null;\r\n                }\r\n            } else if (typeof month === \"number\") {\r\n                month = +m[1];\r\n                start.setMonth(month - 1);\r\n                end.setMonth(month);\r\n\r\n                if (month > 12) {\r\n                    // \"Are you sure you want month to be \" + month;\r\n                    return null;\r\n                }\r\n            } else {\r\n                // \"Invalid end date \" + maybeDatePart;\r\n                return null;\r\n            }\r\n        }\r\n\r\n        candidate = { year, month, day, hour, minute, second };\r\n    }\r\n    else {\r\n        m = /^(\\d{2})-(\\d{2})$/.exec(maybeDatePart);\r\n        if (m) {\r\n            let { year, month, day, hour, minute, second } = startDate;\r\n\r\n            const start = new Date(startDate.start);\r\n            const end = new Date(startDate.end);\r\n\r\n            if (typeof day !== \"number\" || typeof month !== \"number\") {\r\n                // \"Invalid end date \" + maybeDatePart;\r\n                return null;\r\n            }\r\n\r\n            month = +m[1];\r\n            day = +m[2];\r\n\r\n            start.setMonth(month - 1);\r\n            end.setMonth(month - 1);\r\n\r\n            start.setDate(day);\r\n            end.setDate(day + 1);\r\n\r\n            if (month < 1 || month > 12) {\r\n                // \"Are you sure you want month to be \" + month;\r\n                return null;\r\n            }\r\n\r\n            if (day < 1 || day > getMonthLength(start)) {\r\n                // \"Are you sure you want day to be \" + day;\r\n                return null;\r\n            }\r\n\r\n            candidate = { year, month, day, hour, minute, second };\r\n        } else {\r\n            const { year } = startDate;\r\n\r\n            m = /^\\d{3}$/.exec(maybeDatePart);\r\n            if (m && typeof year === \"number\") {\r\n                candidate = { year, yearDay: +m[0] };\r\n            }\r\n            else {\r\n                const spec = parseDate(maybeDatePart);\r\n                if (spec) {\r\n                    return spec;\r\n                }\r\n\r\n                timePart = maybeDatePart;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (timePart) {\r\n        m = /^(\\d{2}):(\\d{2})$/.exec(timePart);\r\n        if (m) {\r\n            let { year, month, day, hour, minute, second } = candidate;\r\n\r\n            const start = new Date(candidate.start);\r\n            const end = new Date(candidate.end);\r\n\r\n            if (typeof second === \"number\") {\r\n                minute = +m[1];\r\n                second = +m[2];\r\n\r\n                start.setMinutes(minute);\r\n                end.setMinutes(minute);\r\n\r\n                start.setSeconds(second);\r\n                end.setSeconds(second + 1);\r\n            } else if (typeof minute === \"number\") {\r\n                hour = +m[1];\r\n                minute = +m[2];\r\n\r\n                start.setHours(hour);\r\n                end.setHours(hour);\r\n\r\n                start.setMinutes(minute);\r\n                end.setMinutes(minute + 1);\r\n\r\n                if (hour > 23) {\r\n                    // \"Are you sure you want hour to be \" + hour;\r\n                    return null;\r\n                }\r\n\r\n                if (minute > 60) {\r\n                    // \"Are you sure you want minute to be \" + minute;\r\n                    return null;\r\n                }\r\n            } else {\r\n                // \"Invalid end date \" + input;\r\n                return null;\r\n            }\r\n\r\n            candidate = { year, month, day, hour, minute, second };\r\n        } else {\r\n            const t = parseTime(timePart);\r\n\r\n            if (!t) {\r\n                return null;\r\n            }\r\n\r\n            const start = new Date(candidate.start);\r\n            const end = new Date(candidate.end);\r\n\r\n            start.setHours(t.hour);\r\n            end.setHours(t.hour);\r\n\r\n            start.setMinutes(t.minute);\r\n            end.setMinutes(t.minute);\r\n\r\n            start.setSeconds(t.second);\r\n            end.setSeconds(t.second + 1);\r\n\r\n            Object.assign(candidate, t);\r\n\r\n            if (t.hour > 23) {\r\n                // \"Are you sure you want hours to be \" + t.hour;\r\n                return null;\r\n            }\r\n\r\n            if (t.minute > 60) {\r\n                // \"Are you sure you want minutes to be \" + t.minute;\r\n                return null;\r\n            }\r\n\r\n            if (t.second > 61) {\r\n                // \"Are you sure you want seconds to be \" + t.second;\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n\r\n    return candidate;\r\n}\r\n","import { addDateAndPeriod } from \"./calc\";\r\n\r\n/**\r\n * @param {import(\".\").DateTimeInterval} value\r\n * @returns {Generator<import(\".\").DateTimeInterval>}\r\n */\r\n\r\n\r\nexport function* getIntervalInstances(value) {\r\n    let prevValue = {\r\n        start: value.start,\r\n        end: value.end,\r\n        period: value.period,\r\n        first: null,\r\n        last: null,\r\n        repetitions: 0,\r\n    };\r\n\r\n    // +1 because repetitions spec doesn't include the very start date or the end of the 0th period\r\n    for (let i = 0; i < value.repetitions + 1; i++) {\r\n        yield prevValue;\r\n        if (value.period) {\r\n            prevValue = {\r\n                start: prevValue.end,\r\n                end: addDateAndPeriod(prevValue.end, value.period),\r\n                period: value.period,\r\n                first: null,\r\n                last: null,\r\n                repetitions: null,\r\n            };\r\n        } else {\r\n            // Many errors due to leap days/seconds\r\n            // TODO: Implement {DateTime - DateTime = Period}\r\n            const delta = +prevValue.end - +prevValue.start;\r\n\r\n            prevValue = {\r\n                start: prevValue.end,\r\n                end: new Date(+prevValue.end + delta),\r\n                period: null,\r\n                first: null,\r\n                last: null,\r\n                repetitions: null,\r\n            };\r\n        }\r\n    }\r\n}\r\n","import { DateTimeInterval } from \"./DateTimeInterval\";\r\nimport { DateTime } from \"./DateTime\";\r\nimport { getIntervalInstances } from \"./intervals\";\r\nimport { isValidDate } from \"./util\";\r\n\r\nexport { DateTime, DateTimeInterval, isValidDate, getIntervalInstances };\r\n\r\n/**\r\n * @typedef DateSpec\r\n * @property {number} [millennium]\r\n * @property {number} [century]\r\n * @property {number} [decade]\r\n * @property {number} [year]\r\n * @property {number} [yearDay]\r\n * @property {number} [week]\r\n * @property {number} [weekDay]\r\n * @property {number} [month]\r\n * @property {number} [day]\r\n */\r\n\r\n/**\r\n * @typedef TimeSpec\r\n * @property {number} [hour]\r\n * @property {number} [minute]\r\n * @property {number} [second]\r\n * @property {number} [zoneHour]\r\n * @property {number} [zoneMinute]\r\n */\r\n\r\n/**\r\n * @typedef DateTimePeriodSpec\r\n * @property {number} [years]\r\n * @property {number} [months]\r\n * @property {number} [weeks]\r\n * @property {number} [days]\r\n * @property {number} [hours]\r\n * @property {number} [minutes]\r\n * @property {number} [seconds]\r\n */\r\n\r\n/**\r\n * @typedef DateTimeIntervalSpec\r\n * @property {DateTime} [first]\r\n * @property {DateTime} [last]\r\n * @property {DateTimePeriodSpec} [period]\r\n * @property {number} [repetitions]\r\n */\r\n\r\n\r\n/**\r\n * @param {string} input\r\n */\r\nexport function parse (input) {\r\n    const dateTimeSpec = DateTime.parse(input);\r\n    if (dateTimeSpec) {\r\n        return new DateTime(dateTimeSpec);\r\n    }\r\n\r\n    const dateTimeIntervalSpec = DateTimeInterval.parse(input);\r\n    if (dateTimeIntervalSpec) {\r\n        return new DateTimeInterval(dateTimeIntervalSpec);\r\n    }\r\n\r\n    // throw new Error(`Invalid input: '${input}' Parsing error: ${e.message}`);\r\n    return null;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport * as ISO8601 from \"../ISO8601\";\r\n\r\nexport default function ISO8601TestPage () {\r\n    const [ inputValue, setInputValue ] = useState(getHashValue);\r\n    const [ showExamples, setShowExamples ] = useState(false);\r\n    const testValues = [\"2\", \"20\", \"202\", \"2021\", \"2021-01\", \"2021-01-18\", \"2021-01-18T15\", \"2021-01-18T15:30\", \"2021-01-18T15:30:00\", \"2021-W03\", \"2021-W03-1\", \"2021-018\", \"20210623\", \"2021174\", \"2021W25\", \"2021W253\", \"2021-018T15\", \"2021-018T15.5\", \"2021-018T15:30\",\"2021-018T15:30.5\", \"2021-018T15:30:00\", \"2021-018T15:30:00.5\", \"2021051T10−05\", \"2021051T10+09\", \"20210510T14Z\", \"20210510TZ\", \"2021-018/P1M\", \"2021-018/P1DT1M\", \"R5/2021-018/P1W\", \"R3/2012-10-01T14:12:01/10T16:19:35\", \"R2/2012-10-01T14:12/12-10T16:19\", \"R2/2012-10-01T14:12:01/12-10T16:19\" ];\r\n\r\n    useEffect(() => {\r\n        const title = `ISO8601 - ${inputValue}`;\r\n        window.history.replaceState(null, title, `#${inputValue}`);\r\n        document.title = title;\r\n    }, [inputValue]);\r\n\r\n    useEffect(() => {\r\n        function cb () {\r\n            setInputValue(getHashValue());\r\n        }\r\n\r\n        window.addEventListener(\"hashchange\", cb);\r\n\r\n        return () => window.removeEventListener(\"hashchange\", cb);\r\n    }, []);\r\n\r\n    let convertedInput, error;\r\n\r\n    if (inputValue) {\r\n        convertedInput = ISO8601.parse(inputValue);\r\n        if (!convertedInput) {\r\n            error = \"Invalid Input: \" + inputValue;\r\n        }\r\n    }\r\n\r\n    const exampleHeaderClass = showExamples ?\r\n        \"CollapsibleHeader CollapsibleHeader--expanded\" :\r\n        \"CollapsibleHeader\";\r\n\r\n    return (\r\n        <div style={{padding: \"2em\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <input value={inputValue} onChange={e => setInputValue(e.target.value)} style={{margin:4,fontSize:\"1.5em\"}} placeholder=\"Input\" />\r\n            { error && <p style={{color:\"red\"}}>{error}</p> }\r\n            { convertedInput && <DateTimePreview value={convertedInput} label={`Input: ${inputValue}`} /> }\r\n            <h2 onClick={() => setShowExamples(!showExamples)} className={exampleHeaderClass}>\r\n                <span>Examples</span>\r\n                <ArrowIndicator invert={showExamples} style={{ width: 16 }} />\r\n            </h2>\r\n            {\r\n                showExamples && testValues.map((v, i) => <DateTimePreview value={ISO8601.parse(v)} label={`Input: ${v}`} key={i} />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction getHashValue() {\r\n    if (window.location.hash.length > 1) {\r\n        return decodeURIComponent(window.location.hash.substr(1));\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/**\r\n * @param {object} props\r\n * @param {import(\"../ISO8601\").DateTime|import(\"../ISO8601\").DateTimeInterval} props.value\r\n * @param {string} [props.label]\r\n * @returns\r\n */\r\nfunction DateTimePreview ({ value, label = \"\" }) {\r\n    const [ showCode, setShowCode ] = useState(false);\r\n\r\n    // JUST FOR TESTING\r\n    if (!value) {\r\n        return <div style={{color:\"red\"}}>STILL TESTING</div>;\r\n    }\r\n\r\n    const pStyle = { margin: 0 };\r\n    const labelStyle = { ...pStyle, fontFamily: \"monospace\", color: \"#333\" };\r\n    const hintStyle = {color:\"#666\",fontSize:\"0.8em\"};\r\n    const boxStyle = { margin: 4, padding: 8, border: \"1px solid #333\", cursor: \"pointer\" };\r\n\r\n    const type = value instanceof ISO8601.DateTime ? \"DateTime\" : \"DateTimeInterval\";\r\n\r\n    let repetitions = [];\r\n\r\n    if (value instanceof ISO8601.DateTimeInterval) {\r\n        try {\r\n            repetitions = getRepetitions(value, 100);\r\n        } catch (e) {\r\n            // JUST FOR TESTING\r\n            return <div style={{color:\"red\"}}>STILL TESTING</div>;\r\n        }\r\n    }\r\n\r\n    if (!ISO8601.isValidDate(value.start) || !ISO8601.isValidDate(value.end)) {\r\n        return <code style={{color:\"darkred\"}}>Javascript Date error {JSON.stringify(value)}</code>;\r\n    }\r\n\r\n    return (\r\n        <div style={boxStyle} onClick={() => setShowCode(!showCode)}>\r\n            { label && <p style={labelStyle}>{label}</p> }\r\n            <p style={pStyle}>\r\n                <time dateTime={toISOString(value.start)}>{dateFormat(value.start)}</time>\r\n                <span style={hintStyle}> ≤ {type} &lt; </span>\r\n                <time dateTime={toISOString(value.end)}>{dateFormat(value.end)}</time>\r\n            </p>\r\n            {\r\n                repetitions.map((d,i) =>\r\n                    <p style={pStyle} key={i}>\r\n                        <time dateTime={toISOString(d.start)}>{dateFormat(d.start)}</time>\r\n                        <span style={hintStyle}> ≤ {type} &lt; </span>\r\n                        <time dateTime={toISOString(d.end)}>{dateFormat(d.end)}</time>\r\n                        {' '}<span style={hintStyle}>({getOrdinal(i + 1)} Repetition)</span>\r\n                    </p>\r\n                )\r\n            }\r\n            { value instanceof ISO8601.DateTimeInterval && repetitions.length < value.repetitions &&\r\n                <p style={{...pStyle, ...hintStyle}}>&hellip; {value.repetitions - repetitions.length} more not shown</p>\r\n            }\r\n            { showCode && <code>{JSON.stringify(value)}</code> }\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * @param {ISO8601.DateTimeInterval} value\r\n */\r\nfunction getRepetitions(value, maxRepetitions = 10) {\r\n    if (value.repetitions === Infinity) {\r\n        return generatorToArray(ISO8601.getIntervalInstances(value), maxRepetitions + 1).slice(1);\r\n    }\r\n\r\n    return [ ...ISO8601.getIntervalInstances(value) ].slice(1, 1 + maxRepetitions);\r\n}\r\n\r\nfunction getOrdinal (n) {\r\n    if (n === 11 || n === 12 || n === 13) return `${n}th`;\r\n    if (n % 10 === 1) return `${n}st`;\r\n    if (n % 10 === 2) return `${n}nd`;\r\n    if (n % 10 === 3) return `${n}rd`;\r\n    return `${n}th`;\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {Generator<T, void, unknown>} generator\r\n * @param {number} maxLength\r\n * @returns {T[]}\r\n */\r\nfunction generatorToArray (generator, maxLength) {\r\n    const list = [];\r\n    let i = 0;\r\n\r\n    while (i++ < maxLength) {\r\n        const result = generator.next();\r\n\r\n        if (!result.done && typeof result.value !== \"undefined\") {\r\n            list.push(result.value);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\n/**\r\n * Intl.DateTimeFormat is so finicky about negative years and super positive years.\r\n * @param {Date} date\r\n */\r\n function dateFormat (date) {\r\n    if (!ISO8601.isValidDate(date)) {\r\n        return <code style={{color:\"darkred\"}}>Javascript Date error</code>;\r\n    }\r\n\r\n    if (date.getFullYear() < 0)\r\n        return toISOString(date);\r\n\r\n    try {\r\n        const formatter = new Intl.DateTimeFormat([], { dateStyle: \"long\", timeStyle: \"long\" });\r\n        return formatter.format(date);\r\n    } catch (e) {\r\n        return toISOString(date);\r\n    }\r\n}\r\n\r\n/**\r\n * Date.prototype.toISOString also doesn't like really large dates\r\n * @param {Date} date\r\n */\r\nfunction toISOString (date) {\r\n    if (!ISO8601.isValidDate(date)) {\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        return date.toISOString();\r\n    } catch (e) {\r\n        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, \"0\")}-${date.getDate().toString().padStart(2, \"0\")}`;\r\n    }\r\n}\r\n\r\nfunction ArrowIndicator ({ invert, style }) {\r\n    const d = invert ?\r\n        \"M 0 7 L 5 2 L 10 7 Z\" :\r\n        \"M 0 2 L 5 7 L 10 2 Z\";\r\n\r\n    return <svg viewBox=\"0 0 10 10\" style={style}>\r\n        <path d={d} />\r\n    </svg>\r\n}","import ISO8601TestPage from './Pages/ISO8601TestPage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ISO8601TestPage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}